// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`triplers search query with age only 1`] = `
"
    match (a:Ambassador {id: \\"123\\"})
    match (node:Tripler {status:\\"unconfirmed\\"})
    where
      not (node)<-[:CLAIMS]-(:Ambassador)
      and not (:Ambassador)-[:WAS_ONCE]->(node)
      and ( node.voted <> true OR node.voted is null)
      
      
      and node.age_decade in [\\"20-29\\"]
      
    with a.location as a_location, node,a
    limit 500
    with a, a_location, node, null as first_n_q, null as last_n_q
    with a, a_location, node, first_n_q, last_n_q,
      
    0 as score1, 0 as score2, 0 as score3
  
    with
      a, node,  avg(score1 + score2 + score3) + (10000 /  distance(a_location, node.location)) * 0 as final_score, distance(a_location, node.location) as distance
    optional match (s:SocialMatch {source_id: \\"123\\"})-[:HAS_SOCIAL_MATCH]-(node)
    RETURN node, case when s.similarity_metric is null then 0 else s.similarity_metric end as similarity_metric
    order by similarity_metric desc, final_score desc
    limit 100
  "
`;

exports[`triplers search query with everything 1`] = `
"
    match (a:Ambassador {id: \\"123\\"})
    CALL db.index.fulltext.queryNodes(\\"triplerFullNameIndex\\", \\"*foo* *bar*\\") YIELD node
    where
      not (node)<-[:CLAIMS]-(:Ambassador)
      and not (:Ambassador)-[:WAS_ONCE]->(node)
      and ( node.voted <> true OR node.voted is null)
      and node.phone in [\\"15551212\\"]
      and node.gender in [\\"F\\"]
      and node.age_decade in [\\"20-29\\"]
      and node.msa in [\\"Jacksonville, FL area\\"]
    with a.location as a_location, node,a
    limit 500
    with a, a_location, node, \\"foo\\" as first_n_q, \\"bar\\" as last_n_q
    with a, a_location, node, first_n_q, last_n_q,
      
    apoc.text.levenshteinSimilarity(replace(replace(toLower(node.full_name), '-', ''), \\"'\\", ''), first_n_q + ' ' + last_n_q) as score1,
    apoc.text.jaroWinklerDistance(replace(replace(toLower(node.full_name), '-', ''), \\"'\\", ''), first_n_q + ' ' + last_n_q) as score2,
    apoc.text.sorensenDiceSimilarity(replace(replace(toLower(node.full_name), '-', ''), \\"'\\", ''), first_n_q + ' ' + last_n_q) as score3
  
    with
      a, node,  avg(score1 + score2 + score3) + (10000 /  distance(a_location, node.location)) * 0.5 as final_score, distance(a_location, node.location) as distance
    optional match (s:SocialMatch {source_id: \\"123\\"})-[:HAS_SOCIAL_MATCH]-(node)
    RETURN node, case when s.similarity_metric is null then 0 else s.similarity_metric end as similarity_metric
    order by similarity_metric desc, final_score desc
    limit 100
  "
`;

exports[`triplers search query with firstName only 1`] = `
"
    match (a:Ambassador {id: \\"123\\"})
    CALL db.index.fulltext.queryNodes(\\"triplerFirstNameIndex\\", \\"*foo*\\") YIELD node
    where
      not (node)<-[:CLAIMS]-(:Ambassador)
      and not (:Ambassador)-[:WAS_ONCE]->(node)
      and ( node.voted <> true OR node.voted is null)
      
      
      
      
    with a.location as a_location, node,a
    limit 500
    with a, a_location, node, \\"foo\\" as first_n_q, null as last_n_q
    with a, a_location, node, first_n_q, last_n_q,
      
    apoc.text.levenshteinSimilarity(replace(replace(toLower(node.first_name), '-', ''), \\"'\\", ''), first_n_q) as score1,
    apoc.text.jaroWinklerDistance(replace(replace(toLower(node.first_name), '-', ''), \\"'\\", ''), first_n_q) as score2,
    apoc.text.sorensenDiceSimilarity(replace(replace(toLower(node.first_name), '-', ''), \\"'\\", ''), first_n_q) as score3
  
    with
      a, node,  avg(score1 + score2 + score3) + (10000 /  distance(a_location, node.location)) * 0 as final_score, distance(a_location, node.location) as distance
    optional match (s:SocialMatch {source_id: \\"123\\"})-[:HAS_SOCIAL_MATCH]-(node)
    RETURN node, case when s.similarity_metric is null then 0 else s.similarity_metric end as similarity_metric
    order by similarity_metric desc, final_score desc
    limit 100
  "
`;

exports[`triplers search query with fullName only 1`] = `
"
    match (a:Ambassador {id: \\"123\\"})
    CALL db.index.fulltext.queryNodes(\\"triplerFullNameIndex\\", \\"*foo* *bar*\\") YIELD node
    where
      not (node)<-[:CLAIMS]-(:Ambassador)
      and not (:Ambassador)-[:WAS_ONCE]->(node)
      and ( node.voted <> true OR node.voted is null)
      
      
      
      
    with a.location as a_location, node,a
    limit 500
    with a, a_location, node, \\"foo\\" as first_n_q, \\"bar\\" as last_n_q
    with a, a_location, node, first_n_q, last_n_q,
      
    apoc.text.levenshteinSimilarity(replace(replace(toLower(node.full_name), '-', ''), \\"'\\", ''), first_n_q + ' ' + last_n_q) as score1,
    apoc.text.jaroWinklerDistance(replace(replace(toLower(node.full_name), '-', ''), \\"'\\", ''), first_n_q + ' ' + last_n_q) as score2,
    apoc.text.sorensenDiceSimilarity(replace(replace(toLower(node.full_name), '-', ''), \\"'\\", ''), first_n_q + ' ' + last_n_q) as score3
  
    with
      a, node,  avg(score1 + score2 + score3) + (10000 /  distance(a_location, node.location)) * 0 as final_score, distance(a_location, node.location) as distance
    optional match (s:SocialMatch {source_id: \\"123\\"})-[:HAS_SOCIAL_MATCH]-(node)
    RETURN node, case when s.similarity_metric is null then 0 else s.similarity_metric end as similarity_metric
    order by similarity_metric desc, final_score desc
    limit 100
  "
`;

exports[`triplers search query with lastName only 1`] = `
"
    match (a:Ambassador {id: \\"123\\"})
    CALL db.index.fulltext.queryNodes(\\"triplerLastNameIndex\\", \\"*bar*\\") YIELD node
    where
      not (node)<-[:CLAIMS]-(:Ambassador)
      and not (:Ambassador)-[:WAS_ONCE]->(node)
      and ( node.voted <> true OR node.voted is null)
      
      
      
      
    with a.location as a_location, node,a
    limit 500
    with a, a_location, node, null as first_n_q, \\"bar\\" as last_n_q
    with a, a_location, node, first_n_q, last_n_q,
      
    apoc.text.levenshteinSimilarity(replace(replace(toLower(node.last_name), '-', ''), \\"'\\", ''), last_n_q) as score1,
    apoc.text.jaroWinklerDistance(replace(replace(toLower(node.last_name), '-', ''), \\"'\\", ''), last_n_q) as score2,
    apoc.text.sorensenDiceSimilarity(replace(replace(toLower(node.last_name), '-', ''), \\"'\\", ''), last_n_q) as score3
  
    with
      a, node,  avg(score1 + score2 + score3) + (10000 /  distance(a_location, node.location)) * 0 as final_score, distance(a_location, node.location) as distance
    optional match (s:SocialMatch {source_id: \\"123\\"})-[:HAS_SOCIAL_MATCH]-(node)
    RETURN node, case when s.similarity_metric is null then 0 else s.similarity_metric end as similarity_metric
    order by similarity_metric desc, final_score desc
    limit 100
  "
`;

exports[`triplers search query without any parameters 1`] = `
"
    match (a:Ambassador {id: \\"123\\"})
    match (node:Tripler {status:\\"unconfirmed\\"})
    where
      not (node)<-[:CLAIMS]-(:Ambassador)
      and not (:Ambassador)-[:WAS_ONCE]->(node)
      and ( node.voted <> true OR node.voted is null)
      
      
      
      
    with a.location as a_location, node,a
    limit 500
    with a, a_location, node, null as first_n_q, null as last_n_q
    with a, a_location, node, first_n_q, last_n_q,
      
    0 as score1, 0 as score2, 0 as score3
  
    with
      a, node,  avg(score1 + score2 + score3) + (10000 /  distance(a_location, node.location)) * 0 as final_score, distance(a_location, node.location) as distance
    optional match (s:SocialMatch {source_id: \\"123\\"})-[:HAS_SOCIAL_MATCH]-(node)
    RETURN node, case when s.similarity_metric is null then 0 else s.similarity_metric end as similarity_metric
    order by similarity_metric desc, final_score desc
    limit 100
  "
`;
